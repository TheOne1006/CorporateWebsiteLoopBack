/**
 * 测试 admin 信息
 */

var app = require('../../../server/server');
// var request = require('supertest');
var assert = require('assert');
var async = require('async');

var help = require('../../help.js');
var json = help.json;
var fixtureData = require('../../fixtureData.js');
// console.log(fixtureData);

var admin = fixtureData.admin;
var theone = fixtureData.theone;
var foo = fixtureData.foo;
var updateUser = fixtureData.updateUser;
var deletedUser = fixtureData.deletedUser;
var statusFalseUser = fixtureData.statusFalseUser;

var usersData = [admin, theone, foo, updateUser, deletedUser, statusFalseUser];

var adminAccessToken = '';
var adminId = '';

// function json(verb, url) {
//   return request(app)[verb](url)
//     .set('Content-Type', 'application/json')
//     .set('Accept', 'application/json')
//     .expect('Content-Type', /json/);
// }

describe('测试Admin的登陆', function() {

  before(function(done) {
    require('../../start-server');
    done();
  });

  before('初始化移除所有测试数据库数据', function (done) {
    app.dataSources.mysqlDs.autoupdate('Admin',function (err) {
      if(err) return done(err);

      async.eachSeries(usersData, function (user, callback) {
        app.models.Admin.findOrCreate({
          where: {
            username: user.username
          }
        }, user, callback);
      }, done);
    });
  });

  after(function(done) {
    app.removeAllListeners('started');
    app.removeAllListeners('loaded');
    done();
  });

  describe('无token访问', function () {
    it('/api/admins', function (done) {
      json('get','/api/admins')
        .expect(401, function (err, res) {
          assert.equal('Authorization Required', res.body.error.message);
          done(err);
        });
    });
  });

  describe('登陆 admin 账号后访问', function () {

    it('POST /api/admins/login', function (done) {
      json('post','/api/admins/login')
        .send({
          username: admin.username,
          password: admin.password
        })
        .expect(200, function (err, res) {
          if(!err) {
            adminAccessToken = res.body.id;
            adminId = res.body.userId;
          }
          done(err);
        });
    });

    it('GET /api/admins with access_token', function (done) {
      json('get','/api/admins?access_token='+adminAccessToken)
        .expect(200, done);
    });

  });

  describe('登录限制', function () {
    describe('用户状态 status 不符合无法登录', function () {
      it('POST /api/admins/login - user status is false', function (done) {
        json('post','/api/admins/login')
          .send({
            username: statusFalseUser.username,
            password: statusFalseUser.password
          })
          .expect(401, function (err, res) {
            assert.equal(res.body.error.code, 'LOGIN_FAILED');
            done(err);
          });
      });
    });

    describe('用户状态 deleted 不符合条件无法登录', function () {

    });

    describe('用户状态正常, 符合登录条件 登录成功', function () {

    });
  });

  describe('注册限制', function () {
    before(function (done) {
      app.models.Admin.destroyAll({description:'test'}, done);
    });

    it('POST /api/admins without access_token 不允许非登录用户注册', function (done) {
      json('post','/api/admins')
        .send({
          username: 'newUser',
          password: '123456',
          description: 'test',
          email: '291@qq.com'
        })
        .expect(401, function (err, res) {
          // console.log(res.body);
          assert.equal('Authorization Required', res.body.error.message);
          done(err);
        });
    });

    it('POST /api/admins with admin access_token 只允许admin身份的用户注册用户', function (done) {
      json('post','/api/admins?access_token='+adminAccessToken)
        .send({
          username: 'newUser',
          password: '123456',
          description: 'test',
          email: '291@qq.com'
        })
        .expect(200, function (err, res) {
          // console.log(res.body);
          assert.equal(res.body.username, 'newUser');
          done(err);
        });
    });

    it('POST /api/admins with admin access_token fields too long', function (done) {
      json('post','/api/admins?access_token='+adminAccessToken)
        .send({
          username: 'newUserlonglonglonglong',
          password: '1111111111111111111',
          description: 'test',
          email: 'longlonglong111111'
        })
        .expect(422, function (err, res) {
          // console.log(res.body.error.details);
          assert.equal(res.body.error.details.codes.email[0], 'format');
          assert.equal(res.body.error.details.codes.password[0], 'custom');
          assert.equal(res.body.error.details.codes.username[0], 'length.max');
          done(err);
        });
    });

    it('POST /api/admins with admin access_token fields to short', function (done) {
      json('post','/api/admins?access_token='+adminAccessToken)
        .send({
          username: 'ne',
          password: '1',
          description: 'test',
          email: 'wbj@theone.io'
        })
        .expect(422, function (err, res) {
          // console.log(res.body.error.details);
          assert.equal(res.body.error.details.codes.email[0], 'uniqueness');
          assert.equal(res.body.error.details.codes.password[0], 'custom');
          assert.equal(res.body.error.details.codes.username[0], 'length.min');
          done(err);
        });
    });


  });

  describe('删除限制', function () {

    var fooAccessToken = '';
    var fooUserId = '';

    before('清除所有测试用户',function (done) {
      app.models.Admin.destroyAll({description:'test'}, done);
    });

    before('更新测试目标的数据', function (done) {
      app.models.Admin.update({username:foo.username},{deleted:false, status:true}, done);
    });

    it('POST /api/admins/login', function (done) {
      json('post','/api/admins/login')
        .send({
          username: foo.username,
          password: foo.password
        })
        .expect(200, function (err, res) {
          if(!err) {
            fooAccessToken = res.body.id;
            fooUserId = res.body.userId;
          }
          done(err);
        });
    });

    it('DELETE /api/admins : 自己无法删除自己', function (done) {
      json('delete','/api/admins/'+fooUserId+'?access_token='+fooAccessToken)
        .expect(401, function (err, res) {
          // console.log(res.body.error.message);
          assert.equal(res.body.error.message, 'Authorization Required');
          done(err);
        });
    });

    it('DELETE /api/admins : 普通用户无法删除管理员', function (done) {
      json('delete','/api/admins/'+adminId+'?access_token='+fooAccessToken)
        .expect(401, function (err, res) {
          // console.log(res.body.error.message);
          assert.equal(res.body.error.message, 'Authorization Required');
          done(err);
        });
    });

    it('DELETE /api/admins : 超级管理员删除普通用户', function (done) {
      json('delete','/api/admins/'+fooUserId+'?access_token='+adminAccessToken)
        .expect(200, function (err, res) {
          assert.equal(res.body.count, 1);
          done(err);
        });
    });

    it.skip('DELETE /api/admins : 超级管理员无法删除自己', function (done) {
      json('delete','/api/admins/'+adminId+'?access_token='+adminAccessToken)
        .expect(401, function (err, res) {
          // console.log(res.body.error.message);
          assert.equal(res.body.count, 0,'超管删除权限未定义');
          done(err);
        });
    });

  });

  /**
   * 用户修改规则
   * 1. 注册邮箱均不能修改,用户名均不能修改
   * 2. admin 角色可以修改普通用户的信息(修改密码时无需验证当前密码)
   * 3. 普通用户需要验证当前密码后,方可更新密码
   */
  describe('修改用户信息限制',function () {

    var fooAccessToken = '';
    var fooUserId = '';

    before(function (done) {
      app.models.Admin.destroyAll({description:'test'}, done);
    });

    before('更新测试目标的数据', function (done) {
      app.models.Admin.update({username:foo.username},{deleted:false, status:true, mobile: null}, done);
    });

    it('POST /api/admins/login', function (done) {
      json('post','/api/admins/login')
        .send({
          username: foo.username,
          password: foo.password
        })
        .expect(200, function (err, res) {
          if(!err) {
            fooAccessToken = res.body.id;
            fooUserId = res.body.userId;
          }
          done(err);
        });
    });

    describe('PUT /api/admins',function () {

      it('PUT /api/admins with common user', function (done) {
        json('put', `/api/admins/${fooUserId}?access_token=${fooAccessToken}`)
          .send({
            mobile: '13822556776'
          })
          .expect(401, function (err, res) {
            assert.equal(res.body.error.message, 'Authorization Required');
            done(err);
          });
      });

      it('PUT /api/admins with common admin', function (done) {
        json('put', `/api/admins/${fooUserId}?access_token=${adminAccessToken}`)
          .send({
            mobile: '13822556776'
          })
          .expect(200, function (err, res) {
            assert.equal(res.body.mobile, '13822556776');
            done(err);
          });
      });

    });

    describe('修改用户密码', function () {

      after('更新测试目标的数据', function (done) {
        var user = new app.models.Admin();
        user.password = '123456';
        app.models.Admin.update({username:foo.username},{password:user.password, deleted:false, status:true}, done);
      });

      describe('无登陆状态无法修改自己密码', function () {
        it('PUT /api/admins/{id}/updatePassword', function (done) {
          json('put', `/api/admins/${fooUserId}/updatePassword`)
            .send({
              password: '123123',
              oldPassword: '123456'
            })
            .expect(401, function (err, res) {
              assert.equal(res.body.error.code,'AUTHORIZATION_REQUIRED');
              done(err);
            });

        });
      });


      describe('普通账号无法修改别人的密码', function () {
        it('PUT /api/admins/{id}/updatePassword', function (done) {
          json('put', `/api/admins/${fooUserId}/updatePassword?access_token=${adminAccessToken}`)
            .send({
              password: '123123',
              oldPassword: '123456'
            })
            .expect(401, function (err, res) {
              // console.log(res.body);
              assert.equal(res.body.error.code,'AUTHORIZATION_REQUIRED');
              done(err);
            });
        });

      });

      describe('普通账号可以修改自己的密码', function () {
        it('PUT /api/admins/{id}/updatePassword', function (done) {
          json('put', `/api/admins/${fooUserId}/updatePassword?access_token=${fooAccessToken}`)
            .send({
              password: '123123',
              oldPassword: '123456'
            })
            .expect(200, function (err, res) {
              // console.log(res.body);
              assert.equal(foo.username,res.body.username);
              done(err);
            });
        });

        it('使用新密码登录 - 自己修改', function (done) {
          json('post','/api/admins/login')
            .send({
              username: foo.username,
              password: '123123'
            })
            .expect(200, function (err, res) {
              // console.log(res.body);
              assert.equal(fooUserId,res.body.userId);
              done();
            });
        });
      });

      describe('admin 账号可以任意账号密码',function () {
        it('PUT /api/admins', function(done){

          json('put', `/api/admins/${fooUserId}?access_token=${adminAccessToken}`)
            .send({
              password: '111111'
            })
            .expect(200, function (err, res) {
              // console.log(res.body);
              assert.equal(fooUserId,res.body.id);
              done(err);
            });
        });

        it('使用新密码登录 - 管理员修改', function (done) {
          json('post','/api/admins/login')
            .send({
              username: foo.username,
              password: '111111'
            })
            .expect(200, function (err, res) {
              // console.log(res.body);
              assert.equal(fooUserId,res.body.userId);
              done(err);
            });
        });

      });



    });



  });






});
